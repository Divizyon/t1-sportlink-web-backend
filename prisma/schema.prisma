generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sports {
  id                   BigInt                 @id @default(autoincrement())
  name                 String
  description          String
  icon                 String
  events               Events[]
  news                 News[]
  userSports           User_Sports[]
  user_favorite_sports user_favorite_sports[]
}

model User_Sports {
  sport_id    BigInt
  skill_level String
  user_id     String @db.Uuid
  sport       Sports @relation(fields: [sport_id], references: [id])
  user        users  @relation(fields: [user_id], references: [id])

  @@id([user_id, sport_id])
}

model News {
  id             BigInt    @id @default(autoincrement())
  title          String
  content        String
  source_url     String
  image_url      String?
  published_date DateTime
  sport_id       BigInt
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  status         String    @default("pending")
  tags           String[]
  type           String?
  end_time       DateTime? @db.Timestamptz(6)
  sport          Sports    @relation(fields: [sport_id], references: [id])

  @@index([status], map: "idx_news_status")
}

model Events {
  id                 BigInt               @id @default(autoincrement())
  sport_id           BigInt
  title              String
  description        String
  event_date         DateTime
  start_time         DateTime
  end_time           DateTime
  location_name      String
  location_latitude  Float
  location_longitude Float
  max_participants   Int
  status             String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  creator_id         String               @db.Uuid
  approved_at        DateTime?            @db.Timestamptz(6)
  rejected_at        DateTime?            @db.Timestamptz(6)
  participants       Event_Participants[]
  ratings            Event_Ratings[]
  creator            users                @relation("UserEvents", fields: [creator_id], references: [id])
  sport              Sports               @relation(fields: [sport_id], references: [id])
  notifications      Notifications[]
  reports            Reports[]
}

model Event_Participants {
  event_id  BigInt
  joined_at DateTime @default(now())
  role      String
  user_id   String   @db.Uuid
  event     Events   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      users    @relation(fields: [user_id], references: [id])

  @@id([event_id, user_id])
}

model Event_Ratings {
  id         BigInt   @id @default(autoincrement())
  event_id   BigInt
  rating     Int
  review     String
  created_at DateTime @default(now())
  user_id    String   @db.Uuid
  event      Events   @relation(fields: [event_id], references: [id])
  user       users    @relation(fields: [user_id], references: [id])
}

model Notifications {
  id                BigInt   @id @default(autoincrement())
  notification_type String
  content           String
  read_status       Boolean  @default(false)
  created_at        DateTime @default(now())
  event_id          BigInt?
  user_id           String   @db.Uuid
  link              String?
  event             Events?  @relation(fields: [event_id], references: [id], onDelete: Restrict)
  user              users    @relation(fields: [user_id], references: [id])
}

model Reports {
  id                              BigInt   @id @default(autoincrement())
  event_id                        BigInt
  report_reason                   String
  report_date                     DateTime @default(now())
  status                          String
  admin_notes                     String?
  reporter_id                     String   @db.Uuid
  reported_id                     String   @db.Uuid
  updated_by                      String?  @db.Uuid
  event                           Events   @relation(fields: [event_id], references: [id])
  reported                        users    @relation("Reported", fields: [reported_id], references: [id])
  reporter                        users    @relation("Reporter", fields: [reporter_id], references: [id])
  users_Reports_updated_byTousers users?   @relation("Reports_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Admin_Logs {
  id             BigInt   @id @default(autoincrement())
  action_type    String
  description    String
  created_at     DateTime @default(now())
  admin_id       String   @db.Uuid
  admin_username String?  @db.VarChar(100)
  operation_type String?  @db.VarChar(50)
  entity_id      String?  @db.VarChar(100)
  entity_type    String?  @db.VarChar(50)
  details        Json?
  ip_address     String?  @db.VarChar(50)
  admin          users    @relation(fields: [admin_id], references: [id])
}

model User_Ratings {
  id             BigInt   @id @default(autoincrement())
  rating_value   Int
  review_text    String
  created_at     DateTime @default(now())
  rated_user_id  String   @db.Uuid
  rating_user_id String   @db.Uuid
  ratedUser      users    @relation("RatedUser", fields: [rated_user_id], references: [id])
  ratingUser     users    @relation("RatingUser", fields: [rating_user_id], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                          String                 @id @db.Uuid
  username                                    String                 @unique
  email                                       String                 @unique
  first_name                                  String
  last_name                                   String
  phone                                       String
  profile_picture                             String
  default_location_latitude                   Float
  default_location_longitude                  Float
  role                                        String                 @default("USER")
  created_at                                  DateTime               @default(now())
  updated_at                                  DateTime
  is_watched                                  Boolean                @default(false)
  watched_since                               DateTime?
  status                                      String                 @default("active")
  gender                                      String?
  birthday_date                               DateTime?
  address                                     String?
  bio                                         String?
  adminLogs                                   Admin_Logs[]
  eventParticipants                           Event_Participants[]
  eventRatings                                Event_Ratings[]
  createdEvents                               Events[]               @relation("UserEvents")
  notifications                               Notifications[]
  reportsReceived                             Reports[]              @relation("Reported")
  reportsMade                                 Reports[]              @relation("Reporter")
  Reports_Reports_updated_byTousers           Reports[]              @relation("Reports_updated_byTousers")
  userRatingsReceived                         User_Ratings[]         @relation("RatedUser")
  userRatingsGiven                            User_Ratings[]         @relation("RatingUser")
  userSports                                  User_Sports[]
  User_Warnings_User_Warnings_admin_idTousers User_Warnings[]        @relation("User_Warnings_admin_idTousers")
  User_Warnings_User_Warnings_user_idTousers  User_Warnings[]        @relation("User_Warnings_user_idTousers")
  user_favorite_sports                        user_favorite_sports[]
}

model security_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String    @db.VarChar(50)
  admin      String    @db.VarChar(100)
  ip         String    @db.VarChar(50)
  date       String    @db.VarChar(10)
  time       String    @db.VarChar(5)
  status     String    @db.VarChar(20)
  action     String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  admin_id   String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User_Warnings {
  id                                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                             String?   @db.Uuid
  admin_id                            String?   @db.Uuid
  message                             String
  sent_at                             DateTime? @default(now()) @db.Timestamptz(6)
  is_read                             Boolean?  @default(false)
  users_User_Warnings_admin_idTousers users?    @relation("User_Warnings_admin_idTousers", fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_User_Warnings_user_idTousers  users?    @relation("User_Warnings_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([admin_id], map: "idx_user_warnings_admin_id")
  @@index([user_id], map: "idx_user_warnings_user_id")
}

model user_favorite_sports {
  user_id  String   @db.Uuid
  sport_id BigInt
  added_at DateTime @default(now()) @db.Timestamptz(6)
  Sports   Sports   @relation(fields: [sport_id], references: [id])
  users    users    @relation(fields: [user_id], references: [id])

  @@id([user_id, sport_id])
}

model Announcements {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  image_url  String?
  creator_id String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}
