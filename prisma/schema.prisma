// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  username              String    @unique
  password             String
  email                String    @unique
  first_name           String
  last_name            String
  phone                String?
  profile_picture      String?
  default_location_latitude   Float?
  default_location_longitude  Float?
  role                 String
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  events               Event[]   @relation("EventCreator")
  participatedEvents   EventParticipant[]
  ratings              UserRating[]    @relation("RatedUser")
  givenRatings        UserRating[]    @relation("RatingUser")
  reports             Report[]
  notifications       Notification[]
}

model Sport {
  id            String    @id @default(uuid())
  name          String
  description   String
  icon          String?
  events        Event[]
  news          News[]
  userSports    UserSport[]
}

model News {
  id            String    @id @default(uuid())
  title         String
  content       String
  source_url    String?
  image_url     String?
  published_date DateTime
  sport         Sport     @relation(fields: [sport_id], references: [id])
  sport_id      String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Event {
  id                String    @id @default(uuid())
  creator          User      @relation("EventCreator", fields: [creator_id], references: [id])
  creator_id       String
  sport            Sport     @relation(fields: [sport_id], references: [id])
  sport_id         String
  title            String
  description      String
  event_date       DateTime
  start_time       DateTime
  end_time         DateTime
  location_name    String
  location_lat     Float
  location_long    Float
  max_participants Int
  status           String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  participants     EventParticipant[]
  ratings          EventRating[]
  reports          Report[]
}

model EventParticipant {
  id            String    @id @default(uuid())
  event         Event     @relation(fields: [event_id], references: [id])
  event_id      String
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
  role          String
  joined_at     DateTime  @default(now())

  @@unique([event_id, user_id])
}

model EventRating {
  id            String    @id @default(uuid())
  event         Event     @relation(fields: [event_id], references: [id])
  event_id      String
  rating        Int
  review        String?
  created_at    DateTime  @default(now())
}

model UserRating {
  id            String    @id @default(uuid())
  rated_user    User      @relation("RatedUser", fields: [rated_user_id], references: [id])
  rated_user_id String
  rating_user   User      @relation("RatingUser", fields: [rating_user_id], references: [id])
  rating_user_id String
  rating_value  Int
  review_text   String?
  created_at    DateTime  @default(now())
}

model Notification {
  id                String    @id @default(uuid())
  user             User      @relation(fields: [user_id], references: [id])
  user_id          String
  notification_type String
  content          String
  read_status      Boolean   @default(false)
  created_at       DateTime  @default(now())
  event_id         String?
}

model Report {
  id            String    @id @default(uuid())
  reporter      User      @relation(fields: [reporter_id], references: [id])
  reporter_id   String
  event         Event     @relation(fields: [event_id], references: [id])
  event_id      String
  report_reason String
  report_date   DateTime  @default(now())
  status        String
  admin_notes   String?
}

model AdminLog {
  id            String    @id @default(uuid())
  admin_id      String
  action_type   String
  description   String
  created_at    DateTime  @default(now())
}

model UserSport {
  id            String    @id @default(uuid())
  sport         Sport     @relation(fields: [sport_id], references: [id])
  sport_id      String
  user_id       String
  skill_level   Int?

  @@unique([sport_id, user_id])
}